To do :
    - Encrypt the private part of the RSA key when the app is closed :
        * Encrypt the files and copy them with an other name ;
        * Use AES for this, the key is the Cracker's password in clear ;
        
        * Process :
            - When launching the app : decrypt the files (copy the crypted file to the clear file) ;
            - If the user generate a RSA key, ask the password (and make the encrypted file) ;
            - If the user change the password, re-encrypt all the RSA private key files ;
            - When closing the app (need to detect it), delete the clear files.
        
        * Like that, we could bring Cracker securely, it will be even more portable.
    
    - Apply the CDC on every module ;
    
    - If first time launched, OS is Linux, 7z is installed, and quad.wrdlst is not unzip, unzip it automaticly.

    - When giving the code, purpose a smaller project, without 'Archive', and others useless things for the working of the software ;
    
    - Remove Archive folder ?    
    
    - Continue the CDC ;

    - In crack : if the cipher chosen is known to keep same lth e and d, and if basic brute-froce is chosen, chk wrdlst, and alert user if lth is not the same (avoid loose time), but let him do if he want ;    
    
    - be able to crack a list of encrypted/hashed words ;
    
    - Add a password-based key derivation function (PBKDF2) ? ;

    - Add french translation (in GUI) ;
    
    - With the dark fusion theme, be able to see when a widget is desactivated ;
    
    - Add a Disclamer about using Cracker functions.    
    
    - Add an option 'space result' in b_cvrt GUI (to be able to not space it, to copy it) ;
    
    - Recommand Pyzo editor + #todo: syntax
    
    - Python syntax : replace
    
       ```python
       ret = ''
       for k in lst:
           ret += k
       ```
       by
       
       ```python
       ret = ''.join(lst)
       ```
    
    
    - Parser Todo :
        .add a needed option which will be the tab ;
        .eg. :
            .crackerp cipher -c KRIS -msg test -key "Elerias" ;
            .crackerp crack -md 0 -wrdlst w4az -fn hashes.txt -c sha512 ;
            .crackerp pwd_testor -p azertyuiop OR cracherp pwd_testor ;
